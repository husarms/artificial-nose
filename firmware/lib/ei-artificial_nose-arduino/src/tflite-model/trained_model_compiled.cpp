/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 21.04.2021 16:01:26

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 208;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,20 } };
const ALIGN(8) float tensor_data1[16] = { 0, -0.0036825048737227917, 0, 0, 0.16325125098228455, 0.47075769305229187, 0, 0, -0.26177802681922913, 0, 0.49964141845703125, -0.2535591721534729, 0.54933542013168335, -0.31894630193710327, 0, 0, };
const TfArray<1, int> tensor_dimension1 = { 1, { 16 } };
const ALIGN(8) float tensor_data2[8] = { 0, 0.52961760759353638, 0, 0, -0.095700018107891083, 0, -0.24676412343978882, 0.41079533100128174, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const ALIGN(8) float tensor_data3[2] = { 0.29082584381103516, -0.29082563519477844, };
const TfArray<1, int> tensor_dimension3 = { 1, { 2 } };
const ALIGN(8) float tensor_data4[16*20] = { 
  -0.29911276698112488, -0.30303728580474854, 0.27439254522323608, 0.14897763729095459, 0.25306141376495361, -0.066667646169662476, -0.016742706298828125, -0.12974435091018677, -0.12952330708503723, -0.1574934720993042, -0.32281729578971863, -0.048865944147109985, 0.37354123592376709, -0.39950460195541382, 0.013910889625549316, -0.2750895619392395, -0.22942115366458893, 0.33413726091384888, -0.40683326125144958, -0.016993433237075806, 
  0.051794003695249557, -0.18229937553405762, 0.094383485615253448, 0.033510874956846237, -0.070133090019226074, 0.080113261938095093, 0.35336852073669434, -0.10205422341823578, -0.035742226988077164, 0.1323348730802536, -0.32895347476005554, -0.23571948707103729, 0.29849439859390259, 0.0094286249950528145, -0.25207206606864929, -0.087640911340713501, 0.08149690181016922, -0.17045308649539948, 0.028251718729734421, 0.070526458323001862, 
  -0.0029951632022857666, -0.27207913994789124, -0.40160468220710754, -0.38382887840270996, -0.14624333381652832, -0.00058907270431518555, 0.24319994449615479, -0.13827994465827942, 0.12992715835571289, -0.091533660888671875, -0.25277605652809143, -0.10940593481063843, -0.14875084161758423, 0.030295401811599731, -0.30512082576751709, -0.29745206236839294, 0.29919290542602539, -0.10801863670349121, -0.046993821859359741, 0.096641361713409424, 
  -0.39447787404060364, -0.11633709073066711, 0.3873935341835022, -0.018169224262237549, -0.093880772590637207, 0.10680139064788818, 0.083959996700286865, 0.35114234685897827, 0.10286390781402588, -0.37498703598976135, 0.061648041009902954, 0.35737621784210205, 0.32503980398178101, -0.087471216917037964, -0.21781466901302338, 0.063857913017272949, -0.025922954082489014, -0.11452558636665344, -0.24273547530174255, -0.041797250509262085, 
  0.32796394824981689, 0.043411348015069962, 0.67086756229400635, 0.3933873176574707, 0.15099555253982544, 0.61241608858108521, 0.5188601016998291, 0.48091500997543335, 0.59178739786148071, 0.19721539318561554, 0.37193262577056885, 0.35405385494232178, 0.42279073596000671, 0.26701483130455017, 0.76909536123275757, 0.32283136248588562, 0.70140713453292847, -0.010114227421581745, 0.70431238412857056, 0.38313344120979309, 
  0.26396355032920837, 0.15464247763156891, 0.080515988171100616, -0.056346505880355835, -0.27052617073059082, -0.5803762674331665, -0.19726641476154327, -0.73805427551269531, -0.37377938628196716, 0.057221423834562302, -0.23325808346271515, 0.041695009917020798, -0.1978299468755722, 0.16517302393913269, -0.23203958570957184, -0.13367561995983124, -0.84102541208267212, -0.63191848993301392, -0.48703286051750183, -0.94063526391983032, 
  -0.30182868242263794, -0.39697158336639404, -0.085389554500579834, 0.4012114405632019, -0.30299153923988342, -0.15592631697654724, 0.090780884027481079, 0.15307694673538208, 0.2055206298828125, -0.013065814971923828, -0.18853017687797546, 0.040388047695159912, -0.10104823112487793, -0.34074282646179199, 0.34337055683135986, -0.40116560459136963, -0.088186740875244141, -0.040562272071838379, 0.040102660655975342, -0.2960907518863678, 
  -0.13421985507011414, -0.10885909199714661, 0.18403977155685425, -0.12477689981460571, -0.071782350540161133, -0.33203920722007751, 0.11771982908248901, -0.01256173849105835, -0.24344435334205627, 0.28197050094604492, 0.32214140892028809, 0.34614211320877075, 0.36583268642425537, -0.23715570569038391, 0.33259749412536621, -0.29098618030548096, 0.17999118566513062, -0.11896082758903503, 0.39838922023773193, 0.17669951915740967, 
  0.27462339401245117, 0.3755757212638855, -0.090829305350780487, 0.39135795831680298, 0.25775966048240662, 0.81344980001449585, 0.92476290464401245, 0.21889190375804901, 0.51843500137329102, -0.18251033127307892, 0.4691605269908905, 0.42308488488197327, 0.66885608434677124, 0.3159477710723877, 0.066813565790653229, 0.47524124383926392, 0.35870146751403809, 0.6158527135848999, 0.18496215343475342, 0.33254545927047729, 
  -0.019474685192108154, -0.22850631177425385, 0.0051322281360626221, -0.38294333219528198, 0.27036422491073608, -0.351255863904953, 0.15079778432846069, 0.25706452131271362, 0.067301392555236816, -0.079393476247787476, 0.20321065187454224, -0.33665868639945984, 0.21385014057159424, 0.035713285207748413, 0.35217422246932983, -0.19342899322509766, -0.19024345278739929, -0.22828449308872223, -0.064351379871368408, 0.085872918367385864, 
  -0.11347164213657379, 0.57617491483688354, -0.11000692844390869, 0.5347105860710144, -0.51190751791000366, -0.17620602250099182, -0.44610077142715454, -0.93645995855331421, -0.56514555215835571, 0.56574010848999023, -0.24072642624378204, -0.079959377646446228, -0.43535396456718445, -0.63935214281082153, 0.009480760432779789, -0.5186847448348999, -0.87719917297363281, -0.38500070571899414, -0.77090394496917725, -0.81224304437637329, 
  0.45766487717628479, 0.51327282190322876, -0.1971929520368576, 0.40064969658851624, 0.56920379400253296, 0.56907278299331665, 0.9007912278175354, 0.24406714737415314, 0.5318608283996582, -0.23681972920894623, 0.59981709718704224, -0.027119403705000877, 0.29374521970748901, 0.19212727248668671, 0.39920943975448608, 0.46870690584182739, 0.2379300445318222, 0.45491394400596619, 0.75354462862014771, 0.37245339155197144, 
  0.40435725450515747, 0.41808044910430908, 0.0073133334517478943, 0.30104529857635498, -0.21651509404182434, -0.23819360136985779, -0.37339800596237183, -0.85256826877593994, -0.84359991550445557, 0.1708175390958786, -0.36000728607177734, -0.62067246437072754, -0.17218884825706482, -0.50317275524139404, -0.19970084726810455, -0.91253089904785156, -0.77533358335494995, -0.97020953893661499, -0.22786347568035126, -0.57022225856781006, 
  0.15379996597766876, 0.18531264364719391, 0.035906799137592316, -0.043743252754211426, 0.17956075072288513, 0.73251557350158691, 0.66523700952529907, 0.77551275491714478, 1.0111325979232788, 0.24472789466381073, 0.50568723678588867, 0.3083629310131073, 0.1887785941362381, 0.19209839403629303, 0.47480630874633789, 0.81162428855895996, 0.59591209888458252, 0.91805827617645264, 0.45591729879379272, 0.70261561870574951, 
  -0.23879548907279968, -0.33451265096664429, -0.050799578428268433, 0.16962862014770508, 0.35254824161529541, 0.19132047891616821, -0.13657233119010925, 0.11829078197479248, -0.095737814903259277, -0.27432462573051453, 0.038753330707550049, 0.27240461111068726, -0.33490395545959473, -0.098477572202682495, -0.27197974920272827, -0.33132156729698181, 0.33964407444000244, 0.35000938177108765, -0.33793142437934875, 0.28106284141540527, 
  -0.24857103824615479, 0.22014814615249634, -0.27235585451126099, 0.16805607080459595, 0.19093537330627441, -0.098951280117034912, 0.39646875858306885, 0.058818131685256958, 0.062086820602416992, -0.34635099768638611, -0.055891305208206177, 0.37771445512771606, 0.25406962633132935, -0.35064059495925903, 0.30784595012664795, -0.16187585890293121, -0.27318602800369263, -0.22367154061794281, -0.19853766262531281, 0.1320195198059082, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 16,20 } };
const ALIGN(8) float tensor_data5[8*16] = { 
  -0.305428147315979, -0.32792127132415771, -0.14855062961578369, -0.25914132595062256, -0.24295997619628906, 0.40353333950042725, 0.44693219661712646, -0.13363015651702881, -0.16864728927612305, -0.21216285228729248, -0.40563786029815674, -0.10345363616943359, 0.41094982624053955, 0.024004459381103516, -0.21761417388916016, 0.43289375305175781, 
  -0.31371796131134033, -0.13337504863739014, 0.43100190162658691, -0.38212740421295166, -0.1951674222946167, 1.0158684253692627, -0.35105204582214355, -0.077910184860229492, -0.060258790850639343, 0.36291563510894775, 0.57065922021865845, 0.32665017247200012, 1.0328109264373779, -1.1759606599807739, 0.1864551305770874, -0.1134035587310791, 
  -0.37598812580108643, -0.015671133995056152, 0.31155920028686523, 0.055190682411193848, -0.36425888538360596, 0.30676352977752686, -0.29102492332458496, -0.01527249813079834, 0.05932772159576416, -0.028748273849487305, 0.38048112392425537, -0.44027793407440186, -0.34603214263916016, -0.23272478580474854, -0.46979176998138428, 0.15290355682373047, 
  -0.31692731380462646, 0.070006728172302246, 0.15401053428649902, -0.26763665676116943, 0.042086601257324219, -0.068821072578430176, 0.042628645896911621, 0.28495538234710693, -0.14187514781951904, -0.1081397533416748, 0.42183494567871094, -0.3479996919631958, -0.16752815246582031, 0.30778360366821289, 0.45590794086456299, 0.0087611675262451172, 
  0.07180333137512207, 0.32903003692626953, 0.13741421699523926, 0.033824801445007324, 0.79035073518753052, -0.97464358806610107, -0.0079777240753173828, -0.1295771598815918, 0.68537479639053345, 0.22321140766143799, -0.79873347282409668, 0.72762173414230347, -0.62627357244491577, 0.76236695051193237, 0.28332829475402832, -0.414559006690979, 
  0.29063737392425537, -0.088037014007568359, -0.24212765693664551, 0.10156643390655518, -0.4580155611038208, -0.33157444000244141, 0.22018492221832275, 0.33544802665710449, 0.33851981163024902, -0.38877058029174805, 0.45367670059204102, -0.3541252613067627, 0.076756834983825684, -0.094390988349914551, 0.44095504283905029, -0.36930811405181885, 
  0.38168942928314209, 0.027653822675347328, 0.11606955528259277, 0.083567976951599121, 0.72187483310699463, -0.41104069352149963, 0.41307079792022705, 0.20134615898132324, 0.61364966630935669, -0.46112489700317383, -0.48759615421295166, 0.95803099870681763, -0.93220436573028564, 0.4605771005153656, 0.35338473320007324, -0.48129725456237793, 
  -0.26223492622375488, 0.39026057720184326, -0.29159903526306152, 0.186484694480896, 0.55718827247619629, 0.64069533348083496, -0.093790411949157715, 0.30565369129180908, -0.25293546915054321, -0.2651066780090332, 1.0543651580810547, -0.45900869369506836, 0.97791808843612671, -0.94737553596496582, 0.14399969577789307, -0.085363626480102539, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 8,16 } };
const ALIGN(8) float tensor_data6[2*8] = { 
  -0.22738176584243774, -0.030175311490893364, -0.067677736282348633, -0.68459081649780273, -0.45770749449729919, -0.51449072360992432, -0.16868352890014648, 1.1687662601470947, 
  0.44657599925994873, -1.4247620105743408, -0.071791470050811768, 0.63569200038909912, 1.1251969337463379, 0.4124760627746582, 0.87057304382324219, -0.71055465936660767, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 2,8 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,16 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,8 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,2 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,2 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,1 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 80, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 64, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 8, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 1280, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 512, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, },
  { kTfLiteArenaRw, tensor_arena + 80, (TfLiteIntArray*)&tensor_dimension7, 64, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 32, },
  { kTfLiteArenaRw, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension9, 8, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 8, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
