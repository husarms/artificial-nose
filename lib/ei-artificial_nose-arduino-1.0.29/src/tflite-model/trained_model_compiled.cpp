/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 03.03.2021 17:31:08

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 208;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,20 } };
const ALIGN(8) float tensor_data1[16] = { 0, 0.23970606923103333, 0, 0.3205559253692627, 0.2224552184343338, -0.06085573136806488, 0, 0, -0.16763131320476532, 0, 0.3337385356426239, 0.13274531066417694, 0.2681577205657959, -0.20338404178619385, 0, -0.0061566815711557865, };
const TfArray<1, int> tensor_dimension1 = { 1, { 16 } };
const ALIGN(8) float tensor_data2[8] = { 0, -0.02765701524913311, -0.14788772165775299, 0.06567835807800293, -0.021665997803211212, -0.058418236672878265, 0.28556409478187561, 0.23363602161407471, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const ALIGN(8) float tensor_data3[2] = { 0.16916373372077942, -0.16916368901729584, };
const TfArray<1, int> tensor_dimension3 = { 1, { 2 } };
const ALIGN(8) float tensor_data4[16*20] = { 
  -0.29911276698112488, -0.30303728580474854, 0.27439254522323608, 0.14897763729095459, 0.25306141376495361, -0.066667646169662476, -0.016742706298828125, -0.12974435091018677, -0.12952330708503723, -0.1574934720993042, -0.32281729578971863, -0.048865944147109985, 0.37354123592376709, -0.39950460195541382, 0.013910889625549316, -0.2750895619392395, -0.22942115366458893, 0.33413726091384888, -0.40683326125144958, -0.016993433237075806, 
  0.17761662602424622, -0.055510230362415314, 0.21847701072692871, 0.15933281183242798, -0.71595335006713867, -0.053054440766572952, 0.22774049639701843, -0.23940570652484894, -0.16892042756080627, -0.94494789838790894, -1.0060679912567139, -0.90632814168930054, -0.38552409410476685, -0.66771668195724487, -1.3766257762908936, -0.21876762807369232, -0.055905845016241074, -0.2999575138092041, -0.10287250578403473, 0.001912601524963975, 
  -0.0029951632022857666, -0.27207913994789124, -0.40160468220710754, -0.38382887840270996, -0.14624333381652832, -0.00058907270431518555, 0.24319994449615479, -0.13827994465827942, 0.12992715835571289, -0.091533660888671875, -0.25277605652809143, -0.10940593481063843, -0.14875084161758423, 0.030295401811599731, -0.30512082576751709, -0.29745206236839294, 0.29919290542602539, -0.10801863670349121, -0.046993821859359741, 0.096641361713409424, 
  -0.054617993533611298, 0.22421108186244965, 0.72596061229705811, 0.32169350981712341, -0.35362157225608826, 0.20138385891914368, 0.18329533934593201, 0.4433673620223999, 0.19743999838829041, -0.89836084842681885, -0.083534903824329376, 0.21772898733615875, 0.17413012683391571, -0.23268115520477295, -0.77364909648895264, 0.15168462693691254, 0.055809911340475082, -0.024950545281171799, -0.15490081906318665, 0.2482372522354126, 
  0.097618162631988525, -0.18513332307338715, 0.43804958462715149, 0.16303853690624237, -1.0435547828674316, -0.069204889237880707, -0.15563666820526123, -0.20374788343906403, -0.089840389788150787, -1.1803790330886841, -0.65999150276184082, -0.66981625556945801, -0.61786442995071411, -0.76495832204818726, -0.75723391771316528, -0.18844160437583923, 0.18645153939723969, -0.52222001552581787, 0.19302412867546082, -0.38387781381607056, 
  0.21642401814460754, 0.10373689979314804, 0.036901433020830154, -0.10388107597827911, 0.92070686817169189, 0.17917440831661224, 0.56037420034408569, 0.021999819204211235, 0.38574808835983276, 0.9041440486907959, 0.65306830406188965, 0.9197918176651001, 0.69972336292266846, 1.0515282154083252, 0.98691719770431519, 0.63618391752243042, -0.069988787174224854, 0.14095567166805267, 0.28285112977027893, -0.027890104800462723, 
  -0.30182868242263794, -0.39697158336639404, -0.085389554500579834, 0.4012114405632019, -0.30299153923988342, -0.15592631697654724, 0.090780884027481079, 0.15307694673538208, 0.2055206298828125, -0.013065814971923828, -0.18853017687797546, 0.040388047695159912, -0.10104823112487793, -0.34074282646179199, 0.34337055683135986, -0.40116560459136963, -0.088186740875244141, -0.040562272071838379, 0.040102660655975342, -0.2960907518863678, 
  -0.13421985507011414, -0.10885909199714661, 0.18403977155685425, -0.12477689981460571, -0.071782350540161133, -0.33203920722007751, 0.11771982908248901, -0.01256173849105835, -0.24344435334205627, 0.28197050094604492, 0.32214140892028809, 0.34614211320877075, 0.36583268642425537, -0.23715570569038391, 0.33259749412536621, -0.29098618030548096, 0.17999118566513062, -0.11896082758903503, 0.39838922023773193, 0.17669951915740967, 
  0.079936236143112183, 0.18175776302814484, -0.28546422719955444, 0.19666801393032074, 0.45972183346748352, 0.47798579931259155, 0.58009588718414307, -0.11086715757846832, 0.18299618363380432, 0.91899144649505615, 0.89247655868530273, 0.84198009967803955, 1.0956426858901978, 0.73928338289260864, 0.94118398427963257, 0.2380841076374054, 0.13123677670955658, 0.37369784712791443, -0.052217826247215271, -0.23208469152450562, 
  -0.019474685192108154, -0.22850631177425385, 0.0051322281360626221, -0.38294333219528198, 0.27036422491073608, -0.351255863904953, 0.15079778432846069, 0.25706452131271362, 0.067301392555236816, -0.079393476247787476, 0.20321065187454224, -0.33665868639945984, 0.21385014057159424, 0.035713285207748413, 0.35217422246932983, -0.19342899322509766, -0.19024345278739929, -0.22828449308872223, -0.064351379871368408, 0.085872918367385864, 
  -0.078746721148490906, 0.60817545652389526, -0.072110489010810852, 0.56943786144256592, 0.49707874655723572, 0.56165224313735962, 0.29744452238082886, -0.20147264003753662, 0.17265990376472473, 0.83719843626022339, 0.18033663928508759, 0.33561426401138306, -0.0055709020234644413, -0.2182842493057251, 0.62102866172790527, 0.55994445085525513, 0.20277278125286102, 0.69553804397583008, 0.30774053931236267, 0.025225931778550148, 
  0.35763874650001526, 0.41573637723922729, -0.30033713579177856, 0.30062013864517212, -0.58018332719802856, -0.15784561634063721, 0.17912481725215912, -0.48501917719841003, -0.1950528472661972, -1.3168742656707764, -0.42585703730583191, -1.0448583364486694, -0.74134320020675659, -0.83358508348464966, -0.97618120908737183, -0.18419954180717468, -0.41779062151908875, -0.19953134655952454, 0.10062026232481003, -0.47345411777496338, 
  0.29189315438270569, 0.30437386035919189, -0.10478655248880386, 0.1885845810174942, -0.5626368522644043, 0.16974262893199921, 0.052284162491559982, -0.45397090911865234, -0.43573647737503052, -1.276833176612854, -0.75831645727157593, -1.0120425224304199, -0.57429468631744385, -0.90153795480728149, -1.4625935554504395, -0.40505218505859375, -0.27787715196609497, -0.45747578144073486, 0.27963986992835999, 0.079949826002120972, 
  -0.0099737383425235748, 0.022805185988545418, -0.12814229726791382, -0.20751954615116119, 0.37643635272979736, 0.32437917590141296, 0.24610994756221771, 0.37403899431228638, 0.60303032398223877, 1.4264236688613892, 0.89563918113708496, 0.69418817758560181, 0.58083313703536987, 0.58206707239151001, 1.3602751493453979, 0.40042942762374878, 0.19476167857646942, 0.50184941291809082, 0.04469725489616394, 0.12292751669883728, 
  -0.23879548907279968, -0.33451265096664429, -0.050799578428268433, 0.16962862014770508, 0.35254824161529541, 0.19132047891616821, -0.13657233119010925, 0.11829078197479248, -0.095737814903259277, -0.27432462573051453, 0.038753330707550049, 0.27240461111068726, -0.33490395545959473, -0.098477572202682495, -0.27197974920272827, -0.33132156729698181, 0.33964407444000244, 0.35000938177108765, -0.33793142437934875, 0.28106284141540527, 
  -0.25474664568901062, 0.21397256851196289, -0.27853134274482727, 0.16188059747219086, 0.18565143644809723, -0.10517041385173798, 0.3902488648891449, 0.052599504590034485, 0.055867716670036316, -0.35165223479270935, -0.062102861702442169, 0.37150120735168457, 0.24786101281642914, -0.35685223340988159, 0.30258768796920776, -0.16801749169826508, -0.27932924032211304, -0.22981049120426178, -0.20467929542064667, 0.12747107446193695, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 16,20 } };
const ALIGN(8) float tensor_data5[8*16] = { 
  -0.305428147315979, -0.32792127132415771, -0.14855062961578369, -0.25914132595062256, -0.24295997619628906, 0.40353333950042725, 0.44693219661712646, -0.13363015651702881, -0.16864728927612305, -0.21216285228729248, -0.40563786029815674, -0.10345363616943359, 0.41094982624053955, 0.024004459381103516, -0.21761417388916016, 0.43289375305175781, 
  -0.31371796131134033, -0.13738511502742767, 0.43100190162658691, -0.42089775204658508, -0.41602855920791626, 0.08722706139087677, -0.35105204582214355, -0.077910184860229492, -0.011156970635056496, 0.36291563510894775, -0.21245306730270386, 0.33812806010246277, 0.27919650077819824, -0.4972231388092041, 0.1864551305770874, -0.1085282489657402, 
  -0.37598812580108643, -0.78292465209960938, 0.31155920028686523, 0.17454598844051361, -1.0366878509521484, 0.70697373151779175, -0.29102492332458496, -0.01527249813079834, 0.59040355682373047, -0.028748273849487305, 0.30073857307434082, -1.1352145671844482, -1.4857289791107178, 0.81556791067123413, -0.46979176998138428, 0.15290355682373047, 
  -0.31692731380462646, -0.25981006026268005, 0.15401053428649902, -0.22415567934513092, -0.23406769335269928, 0.042003989219665527, 0.042628645896911621, 0.28495538234710693, -0.014141450636088848, -0.1081397533416748, 0.46336090564727783, -0.71575498580932617, -0.48213070631027222, 0.59275102615356445, 0.45590794086456299, 0.0087611675262451172, 
  0.07180333137512207, 0.326311856508255, 0.13741421699523926, 0.0055372463539242744, 0.35946497321128845, -0.50035512447357178, -0.0079777240753173828, -0.1295771598815918, 0.25192630290985107, 0.22321140766143799, -0.3142642080783844, 0.34312716126441956, -0.18141557276248932, 0.21445856988430023, 0.28332829475402832, -0.40955743193626404, 
  0.29063737392425537, -0.94280904531478882, -0.24212765693664551, 0.15212640166282654, -1.1657353639602661, -0.01614096574485302, 0.22018492221832275, 0.33544802665710449, 0.76075637340545654, -0.38877058029174805, 0.40233078598976135, -1.0973049402236938, -0.7088964581489563, 0.58154135942459106, 0.44095504283905029, -0.36930811405181885, 
  0.38168942928314209, 0.83198130130767822, 0.11606955528259277, 0.24767118692398071, 1.0885181427001953, 0.17097258567810059, 0.41307079792022705, 0.20134615898132324, -0.17687556147575378, -0.46112489700317383, 0.51456409692764282, 1.3015210628509521, 0.84776502847671509, -1.2682359218597412, 0.35338473320007324, -0.47681319713592529, 
  -0.26223492622375488, 1.3446033000946045, -0.29159903526306152, 0.24834230542182922, 1.1400542259216309, -0.33452814817428589, -0.093790411949157715, 0.30565369129180908, -0.58351224660873413, -0.2651066780090332, 0.63093346357345581, 0.3031383752822876, 1.379169225692749, -1.2196738719940186, 0.14399969577789307, -0.085363626480102539, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 8,16 } };
const ALIGN(8) float tensor_data6[2*8] = { 
  -0.22738176584243774, -0.74378132820129395, -1.1728965044021606, -1.1700646877288818, 0.058191366493701935, -1.4334782361984253, 0.820964515209198, 1.4073765277862549, 
  0.44657599925994873, -0.71116095781326294, 1.0334229469299316, 1.1211650371551514, 0.60929656028747559, 1.3314647674560547, -0.11907380819320679, -0.94915693998336792, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 2,8 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,16 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,8 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,2 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,2 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,1 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 80, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 64, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 8, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 1280, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 512, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, },
  { kTfLiteArenaRw, tensor_arena + 80, (TfLiteIntArray*)&tensor_dimension7, 64, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 32, },
  { kTfLiteArenaRw, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension9, 8, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 8, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
