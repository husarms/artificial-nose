/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 09.02.2021 17:20:24

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 960;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_FULLY_CONNECTED, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,28 } };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 56, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) float tensor_data2[16] = { 0.012287037447094917, -0.11275886744260788, 0.30418407917022705, -0.31280726194381714, -0.14816464483737946, -0.14705057442188263, -0.13306315243244171, 0.0055934716947376728, -0.54547411203384399, 0.5774340033531189, 0.023040609434247017, 0.01332214567810297, -0.11767521500587463, -0.059260625392198563, -0.17999552190303802, 0.06062224879860878, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const ALIGN(8) float tensor_data3[8] = { -0.087609611451625824, -0.11982041597366333, -0.051736738532781601, -0.22599415481090546, -0.071716651320457458, -0.12590737640857697, 0.028903588652610779, -0.038198068737983704, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const ALIGN(8) float tensor_data4[3] = { 0.19269397854804993, -0.087446592748165131, 0.064008556306362152, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data5[2] = { 7, 4, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data6[3] = { 1, 7, 16, };
const TfArray<1, int> tensor_dimension6 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data7[2] = { 7, 16, };
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data8[3] = { 1, 7, 8, };
const TfArray<1, int> tensor_dimension8 = { 1, { 3 } };
const ALIGN(8) float tensor_data9[16*4] = { 
  0.0011411875020712614, -0.46383747458457947, 0.31279352307319641, 0.13755682110786438, 
  0.13806283473968506, -0.14829887449741364, -0.0064079542644321918, 0.0040535582229495049, 
  -0.002797986613586545, -0.3120209276676178, -1.6205307245254517, -0.46485733985900879, 
  -0.23782289028167725, -0.097379527986049652, 0.35527437925338745, -0.23188479244709015, 
  0.016189958900213242, -0.42979496717453003, 0.25845807790756226, 0.025687038898468018, 
  0.23343981802463531, 0.08690478652715683, -0.066155366599559784, -0.2334742397069931, 
  -0.024966178461909294, -0.39397686719894409, -0.15650390088558197, 0.49271327257156372, 
  -0.10129977762699127, -0.11406659334897995, 0.20145140588283539, -0.2100808173418045, 
  0.096969261765480042, 0.22313201427459717, -0.38538262248039246, 0.14712205529212952, 
  -0.018700785934925079, -0.027763182297348976, 0.12008199095726013, -1.9098943471908569, 
  -0.44383525848388672, 0.46927636861801147, -0.50077003240585327, 0.21363183856010437, 
  0.31438988447189331, 0.33499518036842346, -0.53582626581192017, 0.31700074672698975, 
  0.20600622892379761, 0.22026875615119934, -0.42484509944915771, 0.011091383174061775, 
  -0.035730894654989243, 0.069025620818138123, -0.12389805912971497, -2.0970029830932617, 
  -0.022027473896741867, 0.0089709339663386345, -0.084148772060871124, 0.082555174827575684, 
  -2.4516670703887939, 0.21214030683040619, -0.36094450950622559, 0.22054915130138397, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 16,4 } };
const ALIGN(8) float tensor_data10[8*16] = { 
  -1.8802305459976196, -0.35094112157821655, -0.29569295048713684, -0.13295386731624603, -0.34961810708045959, 0.40366247296333313, -2.2158105373382568, -0.035291768610477448, -0.15024262666702271, -0.78131920099258423, -0.29252716898918152, -0.091197587549686432, 0.41652369499206543, 0.038534171879291534, -0.35825434327125549, 0.2951948344707489, 
  -0.51358366012573242, -0.13834330439567566, 0.5310027003288269, -0.43351384997367859, -0.43910336494445801, 0.11408650130033493, -2.8658645153045654, 0.070282988250255585, 0.0068197185173630714, 0.98614019155502319, -0.11209284514188766, 0.34986695647239685, 0.33229547739028931, -0.47535398602485657, -0.11313541233539581, 0.00088537298142910004, 
  -0.38447204232215881, -0.015671133995056152, 0.31155920028686523, -0.0077880118042230606, -0.39434239268302917, 0.27133810520172119, -0.29102492332458496, -0.01527249813079834, 0.038526371121406555, -0.060751989483833313, 0.22885975241661072, -0.59266841411590576, -0.35705843567848206, -0.23272478580474854, -0.4711189866065979, 0.02094019390642643, 
  -0.37614554166793823, -0.12030180543661118, 0.15401053428649902, -0.37700894474983215, -0.084675684571266174, -0.068821072578430176, 0.082019202411174774, 0.28495538234710693, -0.116974838078022, -0.1081397533416748, 0.42545711994171143, -0.2752913236618042, 0.075286909937858582, 0.30778360366821289, 0.43462496995925903, -0.0098048597574234009, 
  0.042598310858011246, 0.31865110993385315, 0.094980306923389435, 0.0095599330961704254, 0.32748016715049744, -0.54091960191726685, -0.019303463399410248, -0.056595943868160248, 0.22564411163330078, -0.27598723769187927, -0.26104244589805603, 0.29346579313278198, -0.1639246940612793, 0.14187122881412506, 0.29091808199882507, -0.42517822980880737, 
  0.2302866131067276, -0.29382091760635376, -0.24212765693664551, -0.044841274619102478, -0.5449860692024231, -0.33308622241020203, 0.1456453949213028, 0.31295520067214966, 0.30959117412567139, -0.38877058029174805, 0.40542435646057129, -0.38089892268180847, 0.41803818941116333, -0.094390988349914551, 0.36624583601951599, -0.44262763857841492, 
  0.34267500042915344, 0.033249251544475555, -1.4816811084747314, 0.046797633171081543, 0.17973846197128296, 0.24850790202617645, 0.37991508841514587, 0.076181754469871521, 0.04200146347284317, -1.5802829265594482, 0.20741328597068787, 0.4175160825252533, -0.32919770479202271, -0.30769231915473938, 0.31028550863265991, -0.42626765370368958, 
  -0.43741041421890259, 0.35121437907218933, -0.29159903526306152, 0.12303116917610168, 0.29549959301948547, -0.084431082010269165, -0.69345903396606445, 0.25087064504623413, -0.24207577109336853, -0.2651066780090332, 0.4314277172088623, -0.43288969993591309, 0.36947143077850342, -0.37162518501281738, 0.12711672484874725, -0.056623421609401703, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 8,16 } };
const ALIGN(8) float tensor_data11[3*56] = { 
  -0.093611583113670349, -0.098006539046764374, -0.28184157609939575, 0.25602364540100098, 0.3048732578754425, -0.0088550746440887451, 0.2872374951839447, 0.095607638359069824, -0.23032498359680176, -0.038161635398864746, -0.056264340877532959, 0.18102607131004333, 0.15893448889255524, 0.3078761100769043, 0.29483172297477722, -0.12494716048240662, -0.15201923251152039, 0.090756654739379883, -0.22742152214050293, -0.22450870275497437, 0.025261253118515015, 0.101418137550354, 0.32402625679969788, 0.24445480108261108, 0.057698667049407959, -0.035406708717346191, 0.15612748265266418, -0.12103141844272614, -0.050855450332164764, 0.33267182111740112, -0.23923997581005096, -0.047821797430515289, 0.093794248998165131, 0.29668349027633667, 0.046384215354919434, -0.24406276643276215, -0.17684583365917206, 0.24269801378250122, -0.32948267459869385, 0.14985188841819763, 0.07227557897567749, -1.0514512062072754, 0.22383934259414673, -0.69544142484664917, -0.012687103822827339, -0.29734557867050171, -0.75345003604888916, -0.35632053017616272, -0.85729146003723145, -0.89526259899139404, 0.13996857404708862, -0.088471531867980957, -0.14104312658309937, 0.08477368950843811, -0.59776043891906738, 0.29168611764907837, 
  0.1838524341583252, -0.087062619626522064, 0.26171028614044189, -0.21181246638298035, 0.1187308132648468, 0.0015634298324584961, -0.047661773860454559, 0.12127062678337097, 0.21384435892105103, 0.032401382923126221, -0.27941817045211792, -0.067593611776828766, 0.28982186317443848, 0.078968122601509094, -0.22839656472206116, 0.080780714750289917, -0.29173371195793152, 0.18675969541072845, 0.046230293810367584, 0.20896345376968384, 0.12616521120071411, 0.19031482934951782, 0.036523554474115372, -0.27138876914978027, -0.032895207405090332, 0.28397673368453979, -0.26819396018981934, 0.048940271139144897, 0.19101467728614807, -0.18098561465740204, -0.053382366895675659, 0.062529928982257843, 0.16199524700641632, 0.27938130497932434, 0.22586297988891602, 0.20628398656845093, 0.10632814466953278, 0.17235374450683594, -0.070774838328361511, 0.12376633286476135, -0.060658454895019531, 0.11999944597482681, -0.033340126276016235, -0.058452226221561432, -0.26621651649475098, 0.23076422512531281, -0.074549101293087006, 0.28647211194038391, 0.040892697870731354, -0.35322034358978271, -0.11154916882514954, 0.20682185888290405, -0.63169384002685547, -0.13496437668800354, 0.067905731499195099, -0.13979773223400116, 
  -0.31584560871124268, 0.0064341719262301922, 0.018775969743728638, 0.16981372237205505, 0.20456215739250183, 0.07436797022819519, -0.057874273508787155, -0.02756953239440918, 0.058491975069046021, -0.146731898188591, 0.048871099948883057, -0.15898258984088898, -0.25971224904060364, -0.24601072072982788, -0.038390152156352997, -0.17906880378723145, -0.27877300977706909, 0.36349189281463623, 0.2614588737487793, -0.061661064624786377, 0.25004351139068604, -0.22795182466506958, -0.39941510558128357, 0.0087737441062927246, -0.30878409743309021, -0.064023494720458984, -0.22541186213493347, 0.19617480039596558, 0.088874295353889465, -0.017940744757652283, 0.26547735929489136, 0.085846558213233948, -0.27644425630569458, -0.086242660880088806, 0.26879656314849854, -0.21465951204299927, 0.02252030186355114, 0.017540693283081055, 0.15871343016624451, -0.15163436532020569, -0.17258457839488983, -0.092745959758758545, -0.0064555425196886063, 0.2313915342092514, -0.17991499602794647, -0.28598704934120178, 0.073836088180541992, -0.062074512243270874, -0.24181061983108521, 0.10186348110437393, -0.075144454836845398, -0.055594801902770996, 0.2407744973897934, -0.13757884502410889, 0.095396541059017181, -0.11550702154636383, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 3,56 } };
const TfArray<2, int> tensor_dimension12 = { 2, { 7,4 } };
const TfArray<2, int> tensor_dimension13 = { 2, { 7,16 } };
const TfArray<3, int> tensor_dimension14 = { 3, { 1,7,16 } };
const TfArray<3, int> tensor_dimension15 = { 3, { 1,7,16 } };
const TfArray<2, int> tensor_dimension16 = { 2, { 7,16 } };
const TfArray<2, int> tensor_dimension17 = { 2, { 7,8 } };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,7,8 } };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,7,8 } };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,56 } };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,5 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 12,9,-1 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,6 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 14,2 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,7 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 16,10,-1 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,8 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLiteAddParams opdata7 = { kTfLiteActRelu };
const TfArray<2, int> inputs7 = { 2, { 18,3 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,11,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension0, 112, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 64, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 8, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 12, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 256, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 512, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 672, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 112, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 448, (TfLiteIntArray*)&tensor_dimension13, 448, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 448, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 448, (TfLiteIntArray*)&tensor_dimension15, 448, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 448, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 448, (TfLiteIntArray*)&tensor_dimension17, 224, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 224, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension19, 224, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 224, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension21, 12, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 12, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_ADD, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
